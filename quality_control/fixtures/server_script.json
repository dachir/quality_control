[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-16 17:02:37.430927",
  "module": "Quality Control",
  "name": "Manage Quality Status Before Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "empty_quality_rows = []  # List to store rows with missing quality status\r\nfor idx, i in enumerate(doc.items, start=1):  # Add `enumerate` to track row index\r\n    if doc.stock_entry_type == \"Material Transfer\":\r\n        # Handle custom recontrol case first\r\n        if i.custom_recontrol == 1:\r\n            i.to_quality_status = \"Q\"\r\n            frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"Q\")\r\n        elif doc.custom_control_quality == 0 and doc.custom_status_change == 0:\r\n            if not i.quality_status:\r\n                i.quality_status = \"A\"\r\n                frappe.db.set_value(\"Stock Entry Detail\", i.name, \"quality_status\", \"A\")\r\n            i.to_quality_status = i.quality_status\r\n            frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", i.quality_status)\r\n\r\n    elif doc.stock_entry_type == \"Manufacture\":\r\n        # Fetch quality control status for the item\r\n        if i.branch == \"Kinshasa\":\r\n            quality_control = frappe.db.get_value(\"Item\", i.item_code, \"custom_control_quality\")\r\n            if i.t_warehouse and quality_control == 1:\r\n                i.to_quality_status = \"Q\"\r\n                frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"Q\")\r\n            elif i.s_warehouse:\r\n                i.quality_status = \"A\"\r\n                frappe.db.set_value(\"Stock Entry Detail\", i.name, \"quality_status\", \"A\")\r\n        else:\r\n            i.to_quality_status = \"A\"\r\n            frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"A\")\r\n\r\n    elif doc.stock_entry_type == \"Material Transfer for Manufacture\":\r\n        i.quality_status = \"A\"\r\n        i.to_quality_status = \"A\"\r\n        frappe.db.set_value(\"Stock Entry Detail\", i.name, \"quality_status\", \"A\")\r\n        frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"A\")\r\n\r\n    elif doc.stock_entry_type in [\"Material Receipt\"]:\r\n        i.to_quality_status = i.quality_status\r\n        frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", i.quality_status)\r\n\r\n     # Collect rows with empty quality_status or to_quality_status\r\n    if not (i.quality_status or i.to_quality_status):\r\n        empty_quality_rows.append(idx)\r\n\r\n# Throw error after the loop if there are any issues\r\n#if empty_quality_rows:\r\n#    frappe.throw(f\"Rows {', '.join(map(str, empty_quality_rows))}: 'quality_status' or 'to_quality_status' cannot be empty.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-16 17:02:08.335622",
  "module": "Quality Control",
  "name": "Manage Quality Status Before Insert",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "empty_quality_rows = []  # List to store rows with missing quality status\r\nfor idx, i in enumerate(doc.items, start=1):  # Add `enumerate` to track row index\r\n    if doc.stock_entry_type == \"Material Transfer\":\r\n        # Handle custom recontrol case first\r\n        if i.custom_recontrol == 1:\r\n            i.to_quality_status = \"Q\"\r\n            frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"Q\")\r\n        elif doc.custom_control_quality == 0 and doc.custom_status_change == 0:\r\n            if not i.quality_status:\r\n                i.quality_status = \"A\"\r\n                frappe.db.set_value(\"Stock Entry Detail\", i.name, \"quality_status\", \"A\")\r\n            i.to_quality_status = i.quality_status\r\n            frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", i.quality_status)\r\n\r\n    elif doc.stock_entry_type == \"Manufacture\":\r\n        # Fetch quality control status for the item\r\n        if i.branch == \"Kinshasa\":\r\n            quality_control = frappe.db.get_value(\"Item\", i.item_code, \"custom_control_quality\")\r\n            if i.t_warehouse and quality_control == 1:\r\n                i.to_quality_status = \"Q\"\r\n                frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"Q\")\r\n            elif i.s_warehouse:\r\n                i.quality_status = \"A\"\r\n                frappe.db.set_value(\"Stock Entry Detail\", i.name, \"quality_status\", \"A\")\r\n        else:\r\n            i.to_quality_status = \"A\"\r\n            frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"A\")\r\n\r\n    elif doc.stock_entry_type == \"Material Transfer for Manufacture\":\r\n        i.quality_status = \"A\"\r\n        i.to_quality_status = \"A\"\r\n        frappe.db.set_value(\"Stock Entry Detail\", i.name, \"quality_status\", \"A\")\r\n        frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", \"A\")\r\n\r\n    elif doc.stock_entry_type in [\"Material Receipt\"]:\r\n        i.to_quality_status = i.quality_status\r\n        frappe.db.set_value(\"Stock Entry Detail\", i.name, \"to_quality_status\", i.quality_status)\r\n\r\n     # Collect rows with empty quality_status or to_quality_status\r\n    if not (i.quality_status or i.to_quality_status):\r\n        empty_quality_rows.append(idx)\r\n\r\n# Throw error after the loop if there are any issues\r\n#if empty_quality_rows:\r\n#    frappe.throw(f\"Rows {', '.join(map(str, empty_quality_rows))}: 'quality_status' or 'to_quality_status' cannot be empty.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-01-16 17:01:23.774395",
  "module": "Quality Control",
  "name": "Create Control Quality",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "for i in doc.items:\r\n    if i.to_quality_status == \"Q\":\r\n        # Fetch batch documents related to the current voucher\r\n        batch_docs = frappe.db.sql(\r\n            \"\"\"\r\n            SELECT sbe.batch_no, sbe.qty, sbb.type_of_transaction\r\n            FROM `tabSerial and Batch Entry` sbe\r\n            INNER JOIN `tabSerial and Batch Bundle` sbb ON sbb.name = sbe.parent\r\n            WHERE sbb.voucher_no = %s\r\n            \"\"\", (doc.name,), as_dict=True\r\n        )\r\n\r\n        for b in batch_docs:\r\n            if b[\"type_of_transaction\"] == \"Inward\":\r\n                # Create a new Quality Control document\r\n                qc_doc = frappe.get_doc({\r\n                    \"doctype\": \"Quality Control\",\r\n                    \"report_date\": doc.posting_date,\r\n                    \"company\": doc.company,\r\n                    \"item_code\": i.item_code,\r\n                    \"inspection_type\": \"Incoming\",\r\n                    \"reference_type\": doc.doctype,\r\n                    \"reference_name\": doc.name,\r\n                    \"batch_no\": b[\"batch_no\"],\r\n                    \"batch_qty\": b[\"qty\"],\r\n                    \"balance_qty\": b[\"qty\"],\r\n                })\r\n\r\n                qc_doc.insert()\r\n            else:\r\n                if doc.stock_entry_type == \"Material Transfer\":\r\n                    qc_docs = frappe.db.get_list(\"Quality Control\", {\"batch_no\": b.batch_no}, [\"name\"])\r\n                    for name in qc_docs:\r\n                        qc_doc = frappe.get_doc(\"Quality Control\", name)\r\n                        if qc_doc.balance_qty > 0 :\r\n                            #qty = min (i.qty, qc_doc.balance_qty)\r\n                            if i.qty <= qc_doc.balance_qty:\r\n                                frappe.db.set_value(\"Quality Control\", \"balance_qty\", qc_doc.balance_qty - i.qty)\r\n                                frappe.db.set_value(\"Quality Control\", \"batch_qty\", qc_doc.batch_qty - i.qty)\r\n                                frappe.db.set_value(\"Quality Control\", \"status\", \"Partial\")\r\n                                if qty == qc_doc.balance_qty:\r\n                                    frappe.db.set_value(\"Quality Control\", \"status\", \"Completed\")",
  "script_type": "DocType Event"
 }
]